(function(s,h){typeof exports=="object"&&typeof module<"u"?h(exports):typeof define=="function"&&define.amd?define(["exports"],h):(s=typeof globalThis<"u"?globalThis:s||self,h(s["super-simple-js-game-engine"]={}))})(this,function(s){"use strict";var d=Object.defineProperty;var g=(s,h,n)=>h in s?d(s,h,{enumerable:!0,configurable:!0,writable:!0,value:n}):s[h]=n;var i=(s,h,n)=>(g(s,typeof h!="symbol"?h+"":h,n),n);class h{constructor(t,e){i(this,"_position");i(this,"_size");this._position={x:Math.round(t.x),y:Math.round(t.y)},this._size=e}static use(t,e){return new h(t,e)}get x(){return this._position.x}set x(t){this._position.x=Math.round(t)}get y(){return this._position.y}set y(t){this._position.y=Math.round(t)}get topLeft(){return{x:this.left,y:this.top}}get left(){return Math.round(this.x-this._size.width/2)}get right(){return Math.round(this.x+this._size.width/2)}get top(){return Math.round(this.y-this._size.height/2)}get bottom(){return Math.round(this.y+this._size.height/2)}contains(t){return t.x>=this.left&&t.x<=this.right&&t.y>=this.top&&t.y<=this.bottom}overlaps(t){return this.left<=t.right()&&this.right>=t.left()&&this.top<=t.bottom()&&this.bottom>=t.top()}fillRect(t){t.fillRect(this.left,this.top,this._size.width,this._size.height)}}class n{constructor(t){i(this,"size");this.size={x:0,y:0},this.width=t.x,this.height=t.y}static use(t){return new n(t)}get width(){return this.size.x}set width(t){this.size.x=Math.round(t)}get height(){return this.size.y}set height(t){this.size.y=Math.round(t)}matches(t){return this.size.x===t.x&&this.size.y===t.y}}class o{constructor(t){i(this,"isPaused",!0);i(this,"lastRenderMs",0);i(this,"canvas");i(this,"ctx");i(this,"entities",[]);i(this,"worldSize");i(this,"world");this.canvas=t,this.ctx=t.getContext("2d"),this.worldSize=n.use({x:this.canvas.width,y:this.canvas.height}),this.world=h.use({x:this.worldSize.width/2,y:this.worldSize.height/2},this.worldSize),this.step(0)}pause(){this.isPaused=!0}play(){this.isPaused=!1}step(t){const e=t-this.lastRenderMs;if(!this.isPaused){for(const r of this.entities)r.update&&r.update(e);this.ctx.clearRect(0,0,this.worldSize.width,this.worldSize.height);for(const r of this.entities)r.draw&&r.draw(this.ctx)}this.lastRenderMs=t,requestAnimationFrame(r=>this.step(r))}registerEntity(t){this.entities.length>=2e3||this.entities.push(t)}unregisterEntity(t){const e=this.entities.indexOf(t);e>=0&&this.entities.splice(e,1)}}class c{constructor(t){i(this,"game");this.game=t}remove(){this.game.unregisterEntity(this)}}class a{constructor(t){i(this,"_ms");this._ms=t}static use(t=0){return new a(t)}get ms(){return this._ms}get seconds(){return Math.round(this._ms/1e3)}update(t){this._ms+=t}}class u{constructor(t){i(this,"parent");i(this,"age",a.use());i(this,"deltsMs",0);i(this,"previousState",null);i(this,"currentState",null);this.parent=t}static use(t){return new u(t)}getStateCallback(t,e){if(e){const r=`${t}${e}`;if(r in parent&&typeof parent[r]=="function")return parent[r]}return null}update(t){this.deltsMs=t,this.age.update(t);const e=this.getStateCallback("updateState",this.currentState);e&&e.call(parent)}draw(t){const e=this.getStateCallback("drawState",this.currentState);e&&e.call(parent,t)}set(t){if(t===this.currentState)return;this.previousState=this.currentState,this.currentState=t,this.age._ms=0;const e=this.getStateCallback("leaveState",this.previousState);e&&e.call(parent);const r=this.getStateCallback("enterState",this.currentState);r&&r.call(parent)}}s.AgeTrait=a,s.GameEngine=o,s.GameEntityBase=c,s.PositionTrait=h,s.SizeTrait=n,s.StateTrait=u,Object.defineProperty(s,Symbol.toStringTag,{value:"Module"})});
